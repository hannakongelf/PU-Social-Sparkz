generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// OAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  // createdAt     DateTime   @default(now()) @map(name: "created_at")
  // updatedAt     DateTime?  @updatedAt @map(name: "updated_at")
  admin         Boolean    @default(false)
  accounts      Account[]
  sessions      Session[]
  games         Game[]
  review        Review[]
  favorite      Favorite?
  queue         Queue[]
  report        Report[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum gameType {
  CARD
  DICE
  PHONE
  OTHER
}

enum reportType {
  GAME
  REVIEW
}

model Game {
  id                Int           @id @default(autoincrement())
  name              String
  description       String
  type              gameType
  author            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  playerMax         Int?
  playerMin         Int           @default(2)
  image             String?
  review            Review[]
  favorite          Favorite[]
  queueContainsGame QueueOnGame[]
  createdAt         DateTime      @default(now())
}

model Review {
  id          Int     @id @default(autoincrement())
  description String?
  rating      Int
  author      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  game        Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      Int

  @@unique(name: "usergame", [userId, gameId])
}

model Favorite {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  games   Game[]
  userId String @unique
}

model Queue {
  id                String        @id @default(cuid())
  author            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  queueContainsGame QueueOnGame[]
}

model QueueOnGame {
  id      String @id @default(cuid())
  game    Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId  Int
  queue   Queue  @relation(fields: [queueId], references: [id])
  queueId String
}

model Report {
  id          String     @id @default(cuid())
  author      User       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String
  reportId    Int //This is the FK of the reported object
  contentType reportType //Type of reported object
  description String
}
