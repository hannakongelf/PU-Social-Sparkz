generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// OAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // createdAt     DateTime   @default(now()) @map(name: "created_at")
  // updatedAt     DateTime?  @updatedAt @map(name: "updated_at")
  // admin         Boolean    @default(false)
  accounts      Account[]
  sessions      Session[]
  // Games         Game[]
  // Review        Review[]
  // Favorite      Favorite[]
  // Queue         Queue[]
  // Report        Report[]
  // followedBy    Follows[]  @relation("followedBy")
  // following     Follows[]  @relation("following")

  // @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// enum gameType {
//   CARD
//   DICE
//   PHONE
//   OTHER
// }

// enum reportType {
//   GAME
//   REVIEW
// }

// model Game {
//   id                Int                 @id @default(autoincrement())
//   name              String              @default("")
//   description       String              @default("")
//   type              gameType[]          @default([])
//   author            User                @relation(fields: [userId], references: [id])
//   userId            String
//   Review            Review[]
//   Favorite          Favorite[]
//   QueueContainsGame QueueContainsGame[]
// }

// model Review {
//   id          Int    @id @default(autoincrement())
//   title       String @default("")
//   description String @default("")
//   rating      Int    @default(3)
//   author      User   @relation(fields: [userId], references: [id])
//   userId      String
//   game        Game   @relation(fields: [gameId], references: [id])
//   gameId      Int
// }

// model Favorite {
//   id     String @id @default(cuid())
//   user   User   @relation(fields: [userId], references: [id])
//   game   Game   @relation(fields: [gameId], references: [id])
//   userId String
//   gameId Int
// }

// model Queue {
//   id                String              @id @default(cuid())
//   author            User                @relation(fields: [userId], references: [id])
//   userId            String
//   QueueContainsGame QueueContainsGame[]
// }

// model QueueContainsGame {
//   id      String @id @default(cuid())
//   game    Game   @relation(fields: [gameId], references: [id])
//   gameId  Int
//   queue   Queue  @relation(fields: [queueId], references: [id])
//   queueId String
// }

// model Report {
//   id          String     @id @default(cuid())
//   author      User       @relation(fields: [userId], references: [id])
//   userId      String
//   reportId    Int //This is the FK of the reported object
//   contentType reportType //Type of reported object
// }

// model Follows {
//   followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
//   followedById String
//   following    User   @relation("following", fields: [followingId], references: [id])
//   followingId  String

//   @@id([followingId, followedById])
// }
